/*
 * Created on 2025-03-19 ( 17:24:36 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 4.2.0
 */
package org.demo.entities;

import static junit.framework.TestCase.assertNotNull;

import org.demo.entities.tooling.JpaTest;
import org.junit.Test;

public class OrderDetailsJpaTest extends JpaTest {

    public static OrderDetails getInitEntity() {
    	OrderDetails entity = new OrderDetails();
		entity.setOrderId( CustomerOrderJpaTest.getInitEntity().getOrderId() ) ;
		entity.setProductId( ProductJpaTest.getInitEntity().getProductId() ) ;
		entity.setQuantity( 100 ) ;
		entity.setOriginalPrice( java.math.BigDecimal.valueOf(10000.77) ) ;
		entity.setDiscountAmount( java.math.BigDecimal.valueOf(10000.77) ) ;
		entity.setFinalPrice( java.math.BigDecimal.valueOf(10000.77) ) ;
    	return entity;
	}
	
    private OrderDetails createEntity() {
    	OrderDetails entity = new OrderDetails();
		entity.setOrderId( CustomerOrderJpaTest.getInitEntity().getOrderId() ) ;
		entity.setProductId( ProductJpaTest.getInitEntity().getProductId() ) ;
		entity.setQuantity( 200 ) ;
		entity.setOriginalPrice( java.math.BigDecimal.valueOf(20000.77) ) ;
		entity.setDiscountAmount( java.math.BigDecimal.valueOf(20000.77) ) ;
		entity.setFinalPrice( java.math.BigDecimal.valueOf(20000.77) ) ;
    	return entity;
    }


    private Object getEntityKey(OrderDetails entity) {
		return new OrderDetailsId( entity.getOrderId(), entity.getProductId() );
    }

    @Test
    public void testFind() {
    	OrderDetails e = find(OrderDetails.class, getEntityKey(getInitEntity()) );
		assertNotNull(e);
    }
    
    @Test
    public void testPersistFind() {
    	OrderDetails entity = createEntity();
    	Object key = getEntityKey(entity);

    	// if entity doesn't exist yet
    	if ( find(OrderDetails.class, key) == null ) {

	    	// Create with 'persist'
    		persistAndRefresh(entity);
    	
			// Find
			OrderDetails entity2 = find(OrderDetails.class, key);
			assertNotNull(entity2);
        
			// Remove (use only if no risk of referential integrity constraint violation)
			// findAndRemove(OrderDetails.class, key);			
			// assertNull(find(OrderDetails.class, key));
		}
    }

    @Test
    public void testMergeFind() {
    	OrderDetails entity = createEntity();
    	Object key = getEntityKey(entity);

    	// Create or update with 'merge'
    	mergeAndRefresh(entity);
    	
    	// Find
    	OrderDetails entity2 = find(OrderDetails.class, key);
        assertNotNull(entity2);
        
		// Remove (use only if no risk of referential integrity constraint violation)
		// findAndRemove(OrderDetails.class, key);			
        // assertNull(find(OrderDetails.class, key));
    }

}
