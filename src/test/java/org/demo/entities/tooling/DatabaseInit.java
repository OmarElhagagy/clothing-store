/*
 * Created on 2025-03-19 ( 17:24:39 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 4.2.0
 */
package org.demo.entities.tooling;

import javax.persistence.EntityManager;

import org.demo.entities.AddressesJpaTest;
import org.demo.entities.AuditLogJpaTest;
import org.demo.entities.CartJpaTest;
import org.demo.entities.CategoriesJpaTest;
import org.demo.entities.CustomerJpaTest;
import org.demo.entities.CustomerOrderJpaTest;
import org.demo.entities.EmployeeJpaTest;
import org.demo.entities.ImageJpaTest;
import org.demo.entities.NotificationJpaTest;
import org.demo.entities.OrderDetailsJpaTest;
import org.demo.entities.PaymentMethodsJpaTest;
import org.demo.entities.PhoneNumbersCustomersJpaTest;
import org.demo.entities.PhoneNumbersEmployeesJpaTest;
import org.demo.entities.PhoneNumbersSupplierJpaTest;
import org.demo.entities.PriceHistoryJpaTest;
import org.demo.entities.ProductJpaTest;
import org.demo.entities.PromotionsJpaTest;
import org.demo.entities.ReservedStockJpaTest;
import org.demo.entities.ReturnJpaTest;
import org.demo.entities.ReviewsJpaTest;
import org.demo.entities.SessionsJpaTest;
import org.demo.entities.ShippingJpaTest;
import org.demo.entities.StorageJpaTest;
import org.demo.entities.StoreJpaTest;
import org.demo.entities.StoreInventoryJpaTest;
import org.demo.entities.SupplierJpaTest;
import org.demo.entities.SupplyOrderJpaTest;
import org.demo.entities.UsersJpaTest;
import org.demo.entities.WishlistJpaTest;

/**
 * Database initialization before unit tests
 * 
 * @author Telosys
 *
 */
public class DatabaseInit {

    /**
     * Set database initial state
     * @param em
     */
    public static void initializeTablesData(EntityManager em) {

		// Disable referential integrity
    	execNativeQuery(em, "SET REFERENTIAL_INTEGRITY FALSE");

		// Initialize each table with one entity
		initTableWithEntity(em, AddressesJpaTest.getInitEntity());	
		initTableWithEntity(em, AuditLogJpaTest.getInitEntity());	
		initTableWithEntity(em, CartJpaTest.getInitEntity());	
		initTableWithEntity(em, CategoriesJpaTest.getInitEntity());	
		initTableWithEntity(em, CustomerJpaTest.getInitEntity());	
		initTableWithEntity(em, CustomerOrderJpaTest.getInitEntity());	
		initTableWithEntity(em, EmployeeJpaTest.getInitEntity());	
		initTableWithEntity(em, ImageJpaTest.getInitEntity());	
		initTableWithEntity(em, NotificationJpaTest.getInitEntity());	
		initTableWithEntity(em, OrderDetailsJpaTest.getInitEntity());	
		initTableWithEntity(em, PaymentMethodsJpaTest.getInitEntity());	
		initTableWithEntity(em, PhoneNumbersCustomersJpaTest.getInitEntity());	
		initTableWithEntity(em, PhoneNumbersEmployeesJpaTest.getInitEntity());	
		initTableWithEntity(em, PhoneNumbersSupplierJpaTest.getInitEntity());	
		initTableWithEntity(em, PriceHistoryJpaTest.getInitEntity());	
		initTableWithEntity(em, ProductJpaTest.getInitEntity());	
		initTableWithEntity(em, PromotionsJpaTest.getInitEntity());	
		initTableWithEntity(em, ReservedStockJpaTest.getInitEntity());	
		initTableWithEntity(em, ReturnJpaTest.getInitEntity());	
		initTableWithEntity(em, ReviewsJpaTest.getInitEntity());	
		initTableWithEntity(em, SessionsJpaTest.getInitEntity());	
		initTableWithEntity(em, ShippingJpaTest.getInitEntity());	
		initTableWithEntity(em, StorageJpaTest.getInitEntity());	
		initTableWithEntity(em, StoreJpaTest.getInitEntity());	
		initTableWithEntity(em, StoreInventoryJpaTest.getInitEntity());	
		initTableWithEntity(em, SupplierJpaTest.getInitEntity());	
		initTableWithEntity(em, SupplyOrderJpaTest.getInitEntity());	
		initTableWithEntity(em, UsersJpaTest.getInitEntity());	
		initTableWithEntity(em, WishlistJpaTest.getInitEntity());	

		// Enable referential integrity
    	execNativeQuery(em, "SET REFERENTIAL_INTEGRITY TRUE");
    }

	private static void execNativeQuery(EntityManager em, String sql) {
    	em.getTransaction().begin();
    	em.createNativeQuery(sql).executeUpdate();
    	em.getTransaction().commit();
    }
    
    private static void initTableWithEntity(EntityManager em, Object entity) {
		execQuery(em, "DELETE FROM " + entity.getClass().getSimpleName());
		initEntity(em, entity);
    }
    
    private static void execQuery(EntityManager em, String sql) {
    	em.getTransaction().begin();
    	em.createQuery(sql).executeUpdate();
    	em.getTransaction().commit();
    }
    
    private static void initEntity(EntityManager em, Object entity) {
        em.getTransaction().begin();
        em.merge(entity);
        em.getTransaction().commit();		
    }

}