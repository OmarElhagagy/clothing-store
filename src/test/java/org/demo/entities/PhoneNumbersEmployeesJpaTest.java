/*
 * Created on 2025-03-19 ( 17:24:36 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 4.2.0
 */
package org.demo.entities;

import static junit.framework.TestCase.assertNotNull;

import org.demo.entities.tooling.JpaTest;
import org.junit.Test;

public class PhoneNumbersEmployeesJpaTest extends JpaTest {

    public static PhoneNumbersEmployees getInitEntity() {
    	PhoneNumbersEmployees entity = new PhoneNumbersEmployees();
		entity.setPhoneNumber( "AAAAAAAAAAAAAAAAAAAA" ) ;
		entity.setEmployeeId( EmployeeJpaTest.getInitEntity().getEmployeeId() ) ;
    	return entity;
	}
	
    private PhoneNumbersEmployees createEntity() {
    	PhoneNumbersEmployees entity = new PhoneNumbersEmployees();
		entity.setPhoneNumber( "BBBBBBBBBBBBBBBBBBBB" ) ;
		entity.setEmployeeId( EmployeeJpaTest.getInitEntity().getEmployeeId() ) ;
    	return entity;
    }


    private Object getEntityKey(PhoneNumbersEmployees entity) {
    	return entity.getPhoneNumber();
    }

    @Test
    public void testFind() {
    	PhoneNumbersEmployees e = find(PhoneNumbersEmployees.class, getEntityKey(getInitEntity()) );
		assertNotNull(e);
    }
    
    @Test
    public void testPersistFind() {
    	PhoneNumbersEmployees entity = createEntity();
    	Object key = getEntityKey(entity);

    	// if entity doesn't exist yet
    	if ( find(PhoneNumbersEmployees.class, key) == null ) {

	    	// Create with 'persist'
    		persistAndRefresh(entity);
    	
			// Find
			PhoneNumbersEmployees entity2 = find(PhoneNumbersEmployees.class, key);
			assertNotNull(entity2);
        
			// Remove (use only if no risk of referential integrity constraint violation)
			// findAndRemove(PhoneNumbersEmployees.class, key);			
			// assertNull(find(PhoneNumbersEmployees.class, key));
		}
    }

    @Test
    public void testMergeFind() {
    	PhoneNumbersEmployees entity = createEntity();
    	Object key = getEntityKey(entity);

    	// Create or update with 'merge'
    	mergeAndRefresh(entity);
    	
    	// Find
    	PhoneNumbersEmployees entity2 = find(PhoneNumbersEmployees.class, key);
        assertNotNull(entity2);
        
		// Remove (use only if no risk of referential integrity constraint violation)
		// findAndRemove(PhoneNumbersEmployees.class, key);			
        // assertNull(find(PhoneNumbersEmployees.class, key));
    }

}
